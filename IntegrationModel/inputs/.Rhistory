plot.data$Environment <- gsub("NYU", "lab", plot.data$Location)
plot.data$Environment <- gsub("SF", "wild", plot.data$Environment)
plot.data$Environment <- factor(plot.data$Environment, levels=c("lab","wild"))
plot.data$Genotype <- plot.data$Genetics
plot.data$Genotype <- gsub("AtgW", "B6", plot.data$Genotype)
ggplot(plot.data, aes(PC1, PC2, color = Environment, shape = Genotype)) +
geom_point(size = 3) +
ylab(paste0("PC2 ", round(expl_var[2],2), "% expl. variation")) +
xlab(paste0("PC1 ", round(expl_var[1],2), "% expl. variation")) +
scale_color_manual(values = c("mediumpurple1", "red3")) +
theme_bw()
pdf("cytokines_pca.pdf", height = 10, width = 8)
grid.arrange(g0, g0 + facet_wrap(~ Genotype, ncol = 2), ncol = 1)
dev.off()
g0 <- ggplot(plot.data, aes(PC1, PC2, color = Environment, shape = Genotype)) +
geom_point(size = 3) +
ylab(paste0("PC2 ", round(expl_var[2],2), "% expl. variation")) +
xlab(paste0("PC1 ", round(expl_var[1],2), "% expl. variation")) +
scale_color_manual(values = c("mediumpurple1", "red3")) +
theme_bw()
pdf("cytokines_pca.pdf", height = 10, width = 8)
grid.arrange(g0, g0 + facet_wrap(~ Genotype, ncol = 2), ncol = 1)
dev.off()
PC = pc
rownames(PC$x) <- 1:nrow(PC$x)
rownames(PC$rotation) <- colnames(new_nums)
data <- data.frame(obsnames=row.names(PC$x), PC$x[,1:2])
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation[,1:2])
datapc$var1 <- scales::rescale(datapc$PC1, c(min(data$PC1),max(data$PC1)))
datapc$var2 <- scales::rescale(datapc$PC2, c(min(data$PC2),max(data$PC2)))
datapc$mult <- abs(datapc$PC1*datapc$PC2)
datapc <- datapc[order(datapc$mult, decreasing = T),]
datapc2 = datapc[1:20,]
g_seg1=ggplot(plot.data, aes(PC1,PC2, color = Environment, shape=Genotype)) +
geom_point(size=3) + ggtitle("PCA of Cytokine Responses") +
ylab(paste0("PC2 ", round(expl_var[2],2), "% expl. variation")) +
xlab(paste0("PC1 ", round(expl_var[1],2), "% expl. variation")) +
scale_color_manual(values = c("mediumorchid3", "red3")) + coord_equal() +
theme_bw()
g_seg=ggplot(plot.data, aes(PC1,PC2)) +
geom_point(size=3, alpha=0) + ggtitle("Loadings for Cytokine+Stim") +
scale_color_manual(values = c("mediumorchid3", "red3")) + coord_equal() +
geom_segment(data=datapc2, aes(x=0, y=0, xend=var1, yend=var2),
arrow=arrow(length=unit(0.2,"cm")), alpha=0.5) +
geom_text_repel(data=datapc2, aes(x=var1, y=var2, label=varnames), size = 3) +
theme_bw()
g_seg
pdf("cytokines_PCA_biplot.pdf", height = 12, width = 15)
grid.arrange(g_seg1+theme(legend.position = 'none'), g_seg, nrow = 2)
dev.off()
#
### pause for effect size along pc1
effector <- function(df){
es <- c()
type <- c()
for (i in 2:c(ncol(df)-1)){
if (is.character(df[,i]) | is.factor(df[,i])){
if(length(unique(df[,i]))>1){
var_form <- as.formula(paste("index~", colnames(df)[i]))
fit <- unlist(round(sqrt(eta_sq(aov(var_form, df))[2]), 3))
es <- c(es, fit)
type <- c(type, colnames(df)[i])
} else {
es <- c(es, NA)
type <- c(type, colnames(df)[i])
}
}
if (is.numeric(df[,i])){
fit <- round(cor(df$index, df[,i], method = "spearman"), 3)
es <- c(es, fit)
if(colnames(df)[i]=="Weight_gain."){
type <- c(type, "WeightGain")
} else {
type <- c(type, "CytStim")
}
}
}
res <- data.frame(Variable = colnames(df[,2:c(ncol(df)-1)]),
EffectSize = es, type = type)
return(res)
}
type_cols <- c(Plate="red2", Location="dodgerblue2", CytStim = "forestgreen",
Wedge_cage="navyblue",Flow.date="grey50",
Gender="hotpink",Genetics="darkorange1", Pregnant="purple", WeightGain="black")
##
effect_check <- plot.data[,c(1:108,110)]
#effect_check <- plot.data[,c(1:109)]
colnames(effect_check)[109] <- "index"
es_df <- effector(effect_check)
es_df <- es_df[order(es_df$EffectSize, decreasing = T),]
es_df$Variable <- factor(es_df$Variable, levels = rev(es_df$Variable))
es_df <- subset(es_df, !is.na(EffectSize))
gg_combo=ggplot(es_df, aes(Variable, EffectSize, fill = type)) +
geom_col() +
ggtitle("All Mice")+
scale_fill_manual(values=type_cols)+
theme_bw()+
theme(axis.text.x = element_text(angle=90, hjust=unit(1,"cm")))
gg_combo
#
### pause for effect size along pc1
effector <- function(df){
es <- c()
type <- c()
for (i in 2:c(ncol(df)-1)){
if (is.character(df[,i]) | is.factor(df[,i])){
if(length(unique(df[,i]))>1){
var_form <- as.formula(paste("index~", colnames(df)[i]))
fit <- unlist(round(sqrt(eta_sq(aov(var_form, df))[2]), 3))
es <- c(es, fit)
type <- c(type, colnames(df)[i])
} else {
es <- c(es, NA)
type <- c(type, colnames(df)[i])
}
}
if (is.numeric(df[,i])){
fit <- round(cor(df$index, df[,i], method = "spearman"), 3)
es <- c(es, fit)
if(colnames(df)[i]=="Weight_gain."){
type <- c(type, "WeightGain")
} else {
type <- c(type, "CytStim")
}
}
}
res <- data.frame(Variable = colnames(df[,2:c(ncol(df)-1)]),
EffectSize = es, type = type)
return(res)
}
type_cols <- c(Plate="red2", Location="dodgerblue2", CytStim = "forestgreen",
Wedge_cage="navyblue",Flow.date="grey50",
Gender="hotpink",Genetics="darkorange1", Pregnant="purple", WeightGain="black")
colnmaes(plot.data)[108]
colnames(plot.data)[108]
colnames(plot.data)[110]
View(effect_check)
View(meta)
#colnames(effect_check)[6] <- "Wedge_cage"
#effect_check$Wedge_cage <- factor(effect_check$Wedge_cage)
extra_meta <- read.table("../../../11.19/inputs/BLOOD_lymph_FACS_metadata_names.txt", sep='\t', header=T)
View(extra_meta)
View(extra_meta)
effect_check2 <- merge(effect_check, meta, by.x = mouse_id, by.y = mouse_id, all.x=T, all.y=F)
effect_check2 <- merge(effect_check, meta, by.x = "mouse_id", by.y = "mouse_id", all.x=T, all.y=F)
View(effect_check2)
effect_check2 <- merge(effect_check, meta, by.x = "mouse_id", by.y = "mouse_id")
View(effect_check2)
rownames(extra_meta)
extra_meta$mouse_id
#colnames(effect_check)[6] <- "Wedge_cage"
#effect_check$Wedge_cage <- factor(effect_check$Wedge_cage)
extra_meta <- read.table("../../../11.19/inputs/BLOOD_lymph_FACS_metadata_names.txt", sep='\t', header=T)
rownames(extra_meta) <- as.character(extra_meta$mouse_id)
extra_meta <- extra_meta[rownames(effect_check),]
as.character(extra_meta$mouse_id)
#colnames(effect_check)[6] <- "Wedge_cage"
#effect_check$Wedge_cage <- factor(effect_check$Wedge_cage)
extra_meta <- read.table("../../../11.19/inputs/BLOOD_lymph_FACS_metadata_names.txt", sep='\t', header=T)
as.character(extra_meta$mouse_id)
rownames(extra_meta) <- make.unique(as.character(extra_meta$mouse_id))
extra_meta <- extra_meta[rownames(effect_check),]
View(extra_meta)
unique(as.character(extra_meta$mouse_id))
#colnames(effect_check)[6] <- "Wedge_cage"
#effect_check$Wedge_cage <- factor(effect_check$Wedge_cage)
extra_meta <- read.table("../../../11.19/inputs/BLOOD_lymph_FACS_metadata_names.txt", sep='\t', header=T)
unique(as.character(extra_meta$mouse_id))
rownames(effect_check)
es_df <- effector(effect_check)
es_df <- es_df[order(es_df$EffectSize, decreasing = T),]
es_df$Variable <- factor(es_df$Variable, levels = rev(es_df$Variable))
es_df <- subset(es_df, !is.na(EffectSize))
gg_combo=ggplot(es_df, aes(Variable, abs(EffectSize), fill = type)) +
geom_col() +
guides(fill=guide_legend(title="Feature"))+
ggtitle("EffectSize Along PC2")+
ylab("EffectSize")+
scale_fill_manual(values=type_cols)+
theme_bw()+
coord_flip() +
theme(axis.text = element_text(color='black'))
gg_combo
es_df <- es_df[order(es_df$EffectSize, decreasing = T),]
es_df$Variable <- factor(es_df$Variable, levels = rev(es_df$Variable))
es_df <- subset(es_df, !is.na(EffectSize))
es_df <- es_df[order(abs(es_df$EffectSize), decreasing = T),]
es_df$Variable <- factor(es_df$Variable, levels = rev(es_df$Variable))
gg_combo=ggplot(es_df, aes(Variable, abs(EffectSize), fill = type)) +
geom_col() +
guides(fill=guide_legend(title="Feature"))+
ggtitle("EffectSize Along PC2")+
ylab("EffectSize")+
scale_fill_manual(values=type_cols)+
theme_bw()+
coord_flip() +
theme(axis.text = element_text(color='black'))
gg_combo
es_filt <- subset(es_df, Feature != "Plate" & Feature != "CytStim")
View(es_df)
es_filt <- subset(es_df, type != "Plate" & type != "CytStim")
View(es_filt)
es_cyt <- subset(es_df, type == "CytStim" & abs(EffectSize)>0.2)
View(es_cyt)
es_df <- rbind(es_filt, es_cyt)
gg_combo=ggplot(es_df, aes(Variable, abs(EffectSize), fill = type)) +
geom_col() +
guides(fill=guide_legend(title="Feature"))+
ggtitle("EffectSize Along PC2")+
ylab("EffectSize")+
scale_fill_manual(values=type_cols)+
theme_bw()+
coord_flip() +
theme(axis.text = element_text(color='black'))
gg_combo
pdf("3.15/figs/2a/effect_size_calc_all.pdf", height = 5, width = 7)
gg_combo
dev.off()
getwd()
pdf("effect_size_calc_all_filt.pdf", height = 5, width = 7)
gg_combo
dev.off()
library(matrixStats)
setwd("/Volumes/lokep01lab/lokep01labspace/Rewilding_Data/IntegrationModel/inputs")
#### Data types = MLN RNA-Seq, FACS, 16S, Cytokines
#
#
#
## train data X FACS
blood_lymph_facs <- read.table("BLOOD_lymph_FACS_metadata_names.txt", T, sep='\t')
remove <- which(duplicated(blood_lymph_facs$mouse_id))
blood_lymph_facs <- blood_lymph_facs[-remove,]
rownames(blood_lymph_facs) <- blood_lymph_facs$mouse_id
## train data X FACS
name_change <- read.table("lymph_name_change.txt", T, '\t')
View(name_change)
View(blood_lymph_facs)
## train data X FACS
name_change <- read.table("lymph_name_change.txt", F, '\t')
## train data X FACS
name_change <- read.table("lymph_name_change.txt", F, '\t')
as.character(name_change$V2)
blood_lymph_facs <- read.table("BLOOD_lymph_FACS_metadata_names.txt", T, sep='\t')
remove <- which(duplicated(blood_lymph_facs$mouse_id))
blood_lymph_facs <- blood_lymph_facs[-remove,]
rownames(blood_lymph_facs) <- blood_lymph_facs$mouse_id
colnames(blood_lymph_facs)[13:ncol(blood_lymph_facs)] <- as.character(name_change$V2)
colnames(blood_lymph_facs)[13:ncol(blood_lymph_facs)] <- paste0("Blood_", colnames(blood_lymph_facs)[13:ncol(blood_lymph_facs)])
View(blood_lymph_facs)
mln_myeloid_facs <- read.table("MLN_myeloid_FACS_metadata_names.txt", T, sep='\t')
remove <- which(duplicated(mln_myeloid_facs$mouse_id))
mln_myeloid_facs <- mln_myeloid_facs[-remove,]
rownames(mln_myeloid_facs) <- mln_myeloid_facs$mouse_id
colnames(mln_myeloid_facs)[13:ncol(mln_myeloid_facs)] <- paste0("MLN_", colnames(mln_myeloid_facs)[13:ncol(mln_myeloid_facs)])
colnames(mln_myeloid_facs)
name_change <- read.table("lymph_name_change.txt", F, '\t')
blood_lymph_facs <- read.table("BLOOD_lymph_FACS_metadata_names.txt", T, sep='\t')
remove <- which(duplicated(blood_lymph_facs$mouse_id))
blood_lymph_facs <- blood_lymph_facs[-remove,]
rownames(blood_lymph_facs) <- blood_lymph_facs$mouse_id
colnames(blood_lymph_facs)[13:ncol(blood_lymph_facs)] <- as.character(name_change$V2)
colnames(blood_lymph_facs)[13:ncol(blood_lymph_facs)] <- paste0("Blood_", colnames(blood_lymph_facs)[13:ncol(blood_lymph_facs)])
mln_lymph_facs <- read.table("MLN_lymph_FACS_metadata_names.txt", T, sep='\t')
remove <- which(duplicated(mln_lymph_facs$mouse_id))
mln_lymph_facs <- mln_lymph_facs[-remove,]
rownames(mln_lymph_facs) <- mln_lymph_facs$mouse_id
colnames(mln_lymph_facs)[13:ncol(blood_lymph_facs)] <- as.character(name_change$V2)
colnames(mln_lymph_facs)[13:ncol(mln_lymph_facs)] <- paste0("MLN_", colnames(mln_lymph_facs)[13:ncol(mln_lymph_facs)])
mln_myeloid_facs <- read.table("MLN_myeloid_FACS_metadata_names.txt", T, sep='\t')
remove <- which(duplicated(mln_myeloid_facs$mouse_id))
mln_myeloid_facs <- mln_myeloid_facs[-remove,]
rownames(mln_myeloid_facs) <- mln_myeloid_facs$mouse_id
colnames(mln_myeloid_facs)[13:ncol(mln_myeloid_facs)] <- paste0("MLN_", colnames(mln_myeloid_facs)[13:ncol(mln_myeloid_facs)])
lymph <- merge(blood_lymph_facs[,c(1,13:ncol(blood_lymph_facs))],
mln_lymph_facs[,c(1,13:ncol(mln_lymph_facs))],
by = "mouse_id")
full_facs <- merge(lymph, mln_myeloid_facs[,c(1,13:ncol(mln_myeloid_facs))],
by = "mouse_id")
remover <- unique(which(is.na(full_facs), arr.ind = T)[,1])
full_facs <- full_facs[-remover,]
trainXs <- full_facs[,-1]
rownames(trainXs) <- gsub("-", "_", full_facs$mouse_id)
trainXs_facs <- data.matrix(trainXs)
saveRDS(trainXs_facs[all_overlaps,], file="../ml_inputs/facs.RData")
setwd("/Volumes/lokep01lab/lokep01labspace/Rewilding_Data/IntegrationModel/inputs")
#### Data types = MLN RNA-Seq, FACS, 16S, Cytokines
#
#
#
##### RNA-Seq
## train data RNASeq
rnaseq_df <- read.table("normalizedCounts.txt", T, '\t')
rnaseq_var <- rnaseq_df[order(rowVars(data.matrix(rnaseq_df[,-1])),decreasing=T),]#[1:5000,]
trainX <- t(rnaseq_var[,-1])
colnames(trainX) <- rnaseq_var$GeneSymbol
rownames(trainX) <- gsub("X", "", rownames(trainX))
trainXs_genes <- log2(trainX+1)
## train data X FACS
name_change <- read.table("lymph_name_change.txt", F, '\t')
blood_lymph_facs <- read.table("BLOOD_lymph_FACS_metadata_names.txt", T, sep='\t')
remove <- which(duplicated(blood_lymph_facs$mouse_id))
blood_lymph_facs <- blood_lymph_facs[-remove,]
rownames(blood_lymph_facs) <- blood_lymph_facs$mouse_id
colnames(blood_lymph_facs)[13:ncol(blood_lymph_facs)] <- as.character(name_change$V2)
colnames(blood_lymph_facs)[13:ncol(blood_lymph_facs)] <- paste0("Blood_", colnames(blood_lymph_facs)[13:ncol(blood_lymph_facs)])
mln_lymph_facs <- read.table("MLN_lymph_FACS_metadata_names.txt", T, sep='\t')
remove <- which(duplicated(mln_lymph_facs$mouse_id))
mln_lymph_facs <- mln_lymph_facs[-remove,]
rownames(mln_lymph_facs) <- mln_lymph_facs$mouse_id
colnames(mln_lymph_facs)[13:ncol(blood_lymph_facs)] <- as.character(name_change$V2)
colnames(mln_lymph_facs)[13:ncol(mln_lymph_facs)] <- paste0("MLN_", colnames(mln_lymph_facs)[13:ncol(mln_lymph_facs)])
mln_myeloid_facs <- read.table("MLN_myeloid_FACS_metadata_names.txt", T, sep='\t')
remove <- which(duplicated(mln_myeloid_facs$mouse_id))
mln_myeloid_facs <- mln_myeloid_facs[-remove,]
rownames(mln_myeloid_facs) <- mln_myeloid_facs$mouse_id
colnames(mln_myeloid_facs)[13:ncol(mln_myeloid_facs)] <- paste0("MLN_", colnames(mln_myeloid_facs)[13:ncol(mln_myeloid_facs)])
lymph <- merge(blood_lymph_facs[,c(1,13:ncol(blood_lymph_facs))],
mln_lymph_facs[,c(1,13:ncol(mln_lymph_facs))],
by = "mouse_id")
full_facs <- merge(lymph, mln_myeloid_facs[,c(1,13:ncol(mln_myeloid_facs))],
by = "mouse_id")
remover <- unique(which(is.na(full_facs), arr.ind = T)[,1])
full_facs <- full_facs[-remover,]
trainXs <- full_facs[,-1]
rownames(trainXs) <- gsub("-", "_", full_facs$mouse_id)
trainXs_facs <- data.matrix(trainXs)
## train data X OTU table
otu_tab <- read.table("otu_table_counts.txt", T, '\t')
otu_tab <- aggregate(.~taxonomy, data=otu_tab, sum)
rownames(otu_tab) <- otu_tab$taxonomy
otu_tab <- otu_tab[,-1]
otu_tab <- t(otu_tab)
otu_tab <- otu_tab[,-1]
rownames(otu_tab) <- gsub("X", "", rownames(otu_tab))
rownames(otu_tab) <- gsub("_A.*", "", rownames(otu_tab))
rownames(otu_tab) <- gsub("_N.*", "", rownames(otu_tab))
rownames(otu_tab) <- gsub("_B.*", "", rownames(otu_tab))
rownames(otu_tab) <- gsub("_", "", rownames(otu_tab))
rownames(otu_tab) <- gsub("\\.", "_", rownames(otu_tab))
trainXs_otus <- log2(otu_tab+1)
### train data y
cyt_df <- read.table("MLN_stimulation_flat.txt", T, '\t')
rownames(cyt_df) <- cyt_df$mouse_id
cyt_df <- log2(cyt_df[,-1]+1)
#cyt_df <- scale(cyt_df[,-1])
trainXs_cyt <- data.matrix(cyt_df)
rownames(trainXs_cyt) <- gsub("-", "_", rownames(trainXs_cyt))
all_overlaps <- Reduce(intersect, list(rownames(trainXs_genes),
rownames(trainXs_facs),
rownames(trainXs_otus),
rownames(trainXs_cyt)))
saveRDS(trainXs_genes[all_overlaps,], file="../ml_inputs/genes.RData")
saveRDS(trainXs_facs[all_overlaps,], file="../ml_inputs/facs.RData")
saveRDS(trainXs_otus[all_overlaps,], file="../ml_inputs/otus.RData")
saveRDS(trainXs_cyt[all_overlaps,], file="../ml_inputs/cytokines.RData")
#
trainXs_facs[all_overlaps,]
### 4.8.19
library(matrixStats)
setwd("/Volumes/lokep01lab/lokep01labspace/Rewilding_Data/IntegrationModel/inputs")
setwd("/Volumes/lokep01lab/lokep01labspace/Rewilding_Data/int/IntegrationModel/inputs")
### train data y
cyt_df <- read.table("MLN_stimulation_flat.txt", T, '\t')
## train data RNASeq
rnaseq_df <- read.table("normalizedCounts.txt", T, '\t')
rnaseq_var <- rnaseq_df[order(rowVars(data.matrix(rnaseq_df[,-1])),decreasing=T),]#[1:5000,]
trainX <- t(rnaseq_var[,-1])
colnames(trainX) <- rnaseq_var$GeneSymbol
rownames(trainX) <- gsub("X", "", rownames(trainX))
trainXs_genes <- log2(trainX+1)
## train data X FACS
name_change <- read.table("lymph_name_change.txt", F, '\t')
blood_lymph_facs <- read.table("BLOOD_lymph_FACS_metadata_names.txt", T, sep='\t')
remove <- which(duplicated(blood_lymph_facs$mouse_id))
blood_lymph_facs <- blood_lymph_facs[-remove,]
rownames(blood_lymph_facs) <- blood_lymph_facs$mouse_id
colnames(blood_lymph_facs)[13:ncol(blood_lymph_facs)] <- as.character(name_change$V2)
colnames(blood_lymph_facs)[13:ncol(blood_lymph_facs)] <- paste0("Blood_", colnames(blood_lymph_facs)[13:ncol(blood_lymph_facs)])
mln_lymph_facs <- read.table("MLN_lymph_FACS_metadata_names.txt", T, sep='\t')
remove <- which(duplicated(mln_lymph_facs$mouse_id))
mln_lymph_facs <- mln_lymph_facs[-remove,]
rownames(mln_lymph_facs) <- mln_lymph_facs$mouse_id
colnames(mln_lymph_facs)[13:ncol(blood_lymph_facs)] <- as.character(name_change$V2)
colnames(mln_lymph_facs)[13:ncol(mln_lymph_facs)] <- paste0("MLN_", colnames(mln_lymph_facs)[13:ncol(mln_lymph_facs)])
mln_myeloid_facs <- read.table("MLN_myeloid_FACS_metadata_names.txt", T, sep='\t')
remove <- which(duplicated(mln_myeloid_facs$mouse_id))
mln_myeloid_facs <- mln_myeloid_facs[-remove,]
rownames(mln_myeloid_facs) <- mln_myeloid_facs$mouse_id
colnames(mln_myeloid_facs)[13:ncol(mln_myeloid_facs)] <- paste0("MLN_", colnames(mln_myeloid_facs)[13:ncol(mln_myeloid_facs)])
lymph <- merge(blood_lymph_facs[,c(1,13:ncol(blood_lymph_facs))],
mln_lymph_facs[,c(1,13:ncol(mln_lymph_facs))],
by = "mouse_id")
full_facs <- merge(lymph, mln_myeloid_facs[,c(1,13:ncol(mln_myeloid_facs))],
by = "mouse_id")
remover <- unique(which(is.na(full_facs), arr.ind = T)[,1])
full_facs <- full_facs[-remover,]
trainXs <- full_facs[,-1]
rownames(trainXs) <- gsub("-", "_", full_facs$mouse_id)
trainXs_facs <- data.matrix(trainXs)
## train data X OTU table
otu_tab <- read.table("otu_table_counts.txt", T, '\t')
otu_tab <- aggregate(.~taxonomy, data=otu_tab, sum)
rownames(otu_tab) <- otu_tab$taxonomy
otu_tab <- otu_tab[,-1]
otu_tab <- t(otu_tab)
otu_tab <- otu_tab[,-1]
rownames(otu_tab) <- gsub("X", "", rownames(otu_tab))
rownames(otu_tab) <- gsub("_A.*", "", rownames(otu_tab))
rownames(otu_tab) <- gsub("_N.*", "", rownames(otu_tab))
rownames(otu_tab) <- gsub("_B.*", "", rownames(otu_tab))
rownames(otu_tab) <- gsub("_", "", rownames(otu_tab))
rownames(otu_tab) <- gsub("\\.", "_", rownames(otu_tab))
trainXs_otus <- log2(otu_tab+1)
### train data y
cyt_df <- read.table("MLN_stimulation_flat.txt", T, '\t')
rownames(cyt_df) <- cyt_df$mouse_id
cyt_df <- log2(cyt_df[,-1]+1)
View(cyt_df)
### train data y
cyt_df <- read.table("MLN_stimulation_flat.txt", T, '\t')
rownames(cyt_df) <- cyt_df$mouse_id
cyt_df <- log2(cyt_df[,-1]+1)
View(cyt_df)
### train data y
cyt_df <- read.table("MLN_stimulation_flat.txt", T, '\t')
rownames(cyt_df) <- cyt_df$mouse_id
cyt_df <- log2(cyt_df[,-1]+1)
View(cyt_df)
#cyt_df <- scale(cyt_df[,-1])
trainXs_cyt <- data.matrix(cyt_df)
rownames(trainXs_cyt) <- gsub("-", "_", rownames(trainXs_cyt))
all_overlaps <- Reduce(intersect, list(rownames(trainXs_genes),
rownames(trainXs_facs),
rownames(trainXs_otus),
rownames(trainXs_cyt)))
#
#
#
ser_df <- read.table("Serum_names_final.txt", T, '\t')
View(ser_df)
rownames(ser_df) <- ser_df$sample
ser_df <- log2(ser_df[,-1]+1)
#ser_df <- scale(ser_df[,-1])
trainXs_ser <- data.matrix(ser_df)
rownames(trainXs_ser) <- gsub("-", "_", rownames(trainXs_ser))
View(trainXs_ser)
all_overlaps <- Reduce(intersect, list(rownames(trainXs_genes),
rownames(trainXs_facs),
rownames(trainXs_otus),
rownames(trainXs_cyt),
rownames(trainXs_ser)))
rownames(trainXs_ser)
rownames(trainXs_cyt)
length(intersect(rownames(trainXs_ser), rownames(trainXs_cyt)))
setdiff(rownames(trainXs_ser), rownames(trainXs_cyt))
all_overlaps <- Reduce(intersect, list(rownames(trainXs_genes),
rownames(trainXs_facs),
rownames(trainXs_otus),
rownames(trainXs_cyt)))
saveRDS(trainXs_genes[all_overlaps,], file="../ml_inputs/genes.RData")
saveRDS(trainXs_facs[all_overlaps,], file="../ml_inputs/facs.RData")
saveRDS(trainXs_otus[all_overlaps,], file="../ml_inputs/otus.RData")
saveRDS(trainXs_cyt[all_overlaps,], file="../ml_inputs/cytokines.RData")
meta <- read.table("mice_metadata.11.19_mouse_id.txt", T, '\t')
meta$mouse_id <- gsub("-", "_", meta$mouse_id)
meta <- subset(meta, mouse_id %in% all_overlaps)
rownames(meta) <- meta$mouse_id
meta<-meta[all_overlaps,]
saveRDS(meta, file= "../ml_inputs/mouse_metadata.RData")
View(meta)
### 4.8.19
library(matrixStats)
setwd("/Volumes/lokep01lab/lokep01labspace/Rewilding_Data/int/IntegrationModel/inputs")
### train data y
cyt_df <- read.table("MLN_stimulation_flat.txt", T, '\t')
rownames(cyt_df) <- cyt_df$mouse_id
cyt_df <- log2(cyt_df[,-1]+1)
#cyt_df <- scale(cyt_df[,-1])
trainXs_cyt <- data.matrix(cyt_df)
rownames(trainXs_cyt) <- gsub("-", "_", rownames(trainXs_cyt))
all_overlaps = rownames(cyt_df)
meta <- read.table("mice_metadata.11.19_mouse_id.txt", T, '\t')
meta$mouse_id <- gsub("-", "_", meta$mouse_id)
meta <- subset(meta, mouse_id %in% all_overlaps)
all_overlaps
meta$mouse_id
meta <- read.table("mice_metadata.11.19_mouse_id.txt", T, '\t')
meta <- subset(meta, mouse_id %in% all_overlaps)
rownames(meta) <- meta$mouse_id
table(meta$Environment, meta$Gender)
View(meta)
## train data RNASeq
rnaseq_df <- read.table("normalizedCounts.txt", T, '\t')
intersect(colnames(rnaseq_df), all_overlaps)
colnames(rnaseq_df)
rnaseq_var <- rnaseq_df[order(rowVars(data.matrix(rnaseq_df[,-1])),decreasing=T),]#[1:5000,]
trainX <- t(rnaseq_var[,-1])
colnames(trainX) <- rnaseq_var$GeneSymbol
rownames(trainX) <- gsub("X", "", rownames(trainX))
trainXs_genes <- log2(trainX+1)
intersect(rownames(trainXs_genes), all_overlaps)
rownames(trainXs_genes)
all_overlaps=meta$mouse_id
intersect(rownames(trainXs_genes), all_overlaps)
meta$mouse_id
meta <- read.table("mice_metadata.11.19_mouse_id.txt", T, '\t')
meta$mouse_id <- gsub("-", "_", meta$mouse_id)
all_overlaps = rownames(trainXs_genes)
meta <- read.table("mice_metadata.11.19_mouse_id.txt", T, '\t')
meta$mouse_id <- gsub("-", "_", meta$mouse_id)
meta <- subset(meta, mouse_id %in% all_overlaps)
table(meta$Environment, meta$Gender)
