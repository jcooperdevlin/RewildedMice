theme(title = title,
plot.title = element_text(face="bold", size=14),
axis.title.x = element_text(face="bold", size=12),
axis.title.y = element_text(face="bold", size=12, angle=90),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.justification=c(1,0),
legend.position=c(1,0),
#legend.title=element_blank(),
legend.key = element_blank()
)
return(p)
}
exampledata <- function(n = 50, sd = 1) {
# Control group
ctrl <- data.frame(grp = rep("Control", n),
res = -1 + rnorm(n, mean = 0, sd = sd)
)
# Disease group
dis <- data.frame(grp = rep("Disease", n),
res = 1 + rnorm(n, mean = 0, sd = sd)
)
df <- rbind(ctrl,dis)
return(df)
}
Test1 <- exampledata()
p <- rocplot.single(Test1$grp, Test1$res, title = "")
rocplot.single <- function(grp, pred, title = "ROC Plot", p.value = FALSE){
require(ggplot2)
plotdata <- rocdata(grp, pred)
if (p.value == TRUE){
annotation <- with(plotdata$stats, paste("AUC=",signif(auc, 2), " (P=", signif(p.value, 2), ")", sep=""))
} else {
annotation <- with(plotdata$stats, paste("AUC=",signif(auc, 2), " (95%CI ", signif(ci.upper, 2), " - ", signif(ci.lower, 2), ")", sep=""))
}
p <- ggplot(plotdata$roc, aes(x = x, y = y)) +
geom_line(aes(colour = "")) +
geom_abline (intercept = 0, slope = 1) +
theme_bw() +
scale_x_continuous("False Positive Rate (1-Specificity)") +
scale_y_continuous("True Positive Rate (Sensitivity)") +
scale_colour_manual(labels = annotation, values = "#000000") +
theme(#title = title,
plot.title = element_text(face="bold", size=14),
axis.title.x = element_text(face="bold", size=12),
axis.title.y = element_text(face="bold", size=12, angle=90),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.justification=c(1,0),
legend.position=c(1,0),
#legend.title=element_blank(),
legend.key = element_blank()
)
return(p)
}
exampledata <- function(n = 50, sd = 1) {
# Control group
ctrl <- data.frame(grp = rep("Control", n),
res = -1 + rnorm(n, mean = 0, sd = sd)
)
# Disease group
dis <- data.frame(grp = rep("Disease", n),
res = 1 + rnorm(n, mean = 0, sd = sd)
)
df <- rbind(ctrl,dis)
return(df)
}
Test1 <- exampledata()
p <- rocplot.single(Test1$grp, Test1$res, title = "")
print(p)
View(Test1)
calculate_roc(huh$pred, huh$obs)
test <- subset(huh, obs == "AtgH" | obs == "AtgE")
calculate_roc(test$pred, test$obs)
test$obs
levels(test$obs) = c("AtgH", "AtgE")
levels(test$obs)
test$obs = as.factor(test$obs, levels = c("AtgH", "AtgE"))
test$obs = factor(test$obs, levels = c("AtgH", "AtgE"))
test$obs
calculate_roc(test$pred, test$obs)
View(test)
pred_result=huh
class <- unqiue(pred_result$obs)
classes <- unique(pred_result$obs)
classes
i=1
class_1 <- classes[i]
new_df <- pred_result
new_df$new_lab <- rep(0, nrow(huh))
new_df$new_lab[new_df$obs==class_1]<-1
View(new_df)
class_1 <- classes[i]
new_df <- pred_result
new_df$new_obs <- rep(0, nrow(huh))
new_df$new_obs[new_df$obs==class_1]<-1
View(new_df)
class_1 <- classes[i]
new_df <- pred_result
new_df$new_obs <- rep(0, nrow(huh))
new_df$new_obs[new_df$obs==class_1]<-1
new_df$new_pred <- rep(0, nrow(huh))
new_df$new_pred[new_df$pred==class_1]<-1
View(new_df)
calculate_roc(new_df$new_pred, new_df$new_obs)
View(new_df)
View(huh)
bestModParam <- unlist(rf_test$bestTune)
selectedIndices <- rf_test$pred$mtry == bestModParam
huh <- rf_test$pred[selectedIndices, ]
rf_test$bestTune
selectedIndices <- rf_test$pred$mtry == bestModParam
huh <- rf_test$pred[selectedIndices, ]
i=2
class_1 <- classes[i]
new_df <- pred_result
new_df$new_obs <- rep(0, nrow(huh))
new_df$new_obs[new_df$obs==class_1]<-1
new_df$new_pred <- rep(0, nrow(huh))
new_df$new_pred[new_df$pred==class_1]<-1
calculate_roc(new_df$new_pred, new_df$new_obs)
cc=calculate_roc(new_df$new_pred, new_df$new_obs)
multi_ggroc(cc)
cc=list(cc,cc)
cc
multi_ggroc(cc)
View(huh)
View(huh)
unique(gsub(".*\\.", "", pred_result$Resample))
j=1
reps <- unique(gsub(".*\\.", "", pred_result$Resample))
class_1 <- classes[i]
new_df <- subset(pred_result, grep(reps, pred_result$Resample))
new_df <- subset(pred_result, grepl(reps, pred_result$Resample))
new_df <- subset(pred_result, grepl(reps[j], pred_result$Resample))
View(new_df)
new_df$new_obs <- rep(0, nrow(huh))
new_df$new_obs[new_df$obs==class_1]<-1
new_df$new_pred <- rep(0, nrow(huh))
new_df$new_pred[new_df$pred==class_1]<-1
cc=calculate_roc(new_df$new_pred, new_df$new_obs)
class_1 <- classes[i]
new_df <- subset(pred_result, grepl(reps[j], pred_result$Resample))
new_df$new_obs <- rep(0, nrow(new_df))
new_df$new_obs[new_df$obs==class_1]<-1
new_df$new_pred <- rep(0, nrow(new_df))
new_df$new_pred[new_df$pred==class_1]<-1
cc=calculate_roc(new_df$new_pred, new_df$new_obs)
View(cc)
cc
cc=calculate_roc(new_df$new_pred, new_df$new_obs, ci=F)
cc=calculate_roc(new_df$new_pred, new_df$new_obs, ci=T)
View(cc)
cc=calculate_roc(new_df$new_pred, new_df$new_obs)
getAnywhere(geom_roc())
getAnywhere(calculate_roc())
cc
cc_all = data.frame(FPF=NA,TPF=NA,c=NA)
for(j in 1:length(reps)){
class_1 <- classes[i]
new_df <- subset(pred_result, grepl(reps[j], pred_result$Resample))
new_df$new_obs <- rep(0, nrow(new_df))
new_df$new_obs[new_df$obs==class_1]<-1
new_df$new_pred <- rep(0, nrow(new_df))
new_df$new_pred[new_df$pred==class_1]<-1
cc=calculate_roc(new_df$new_pred, new_df$new_obs)
cc_all <- rbind(cc_all,cc)
}
cc_all <- cc_all[-1,]
View(cc_all)
cc = list(cc_all,cc_all)
multi_ggroc(cc)
new_df <- huh
class_1 <- classes[i]
new_df$new_obs <- rep(0, nrow(new_df))
new_df$new_obs[new_df$obs==class_1]<-1
new_df$new_pred <- rep(0, nrow(new_df))
new_df$new_pred[new_df$pred==class_1]<-1
cc=calculate_roc(new_df$new_pred, new_df$new_obs)
cc
cc=list(cc,cc)
multi_ggroc(cc)
class_1 <- classes[i]
new_df <- subset(pred_result, grepl(reps[j], pred_result$Resample))
new_df$new_obs <- rep(0, nrow(new_df))
new_df$new_obs[new_df$obs==class_1]<-1
new_df$new_pred <- rep(0, nrow(new_df))
new_df$new_pred[new_df$pred==class_1]<-1
multiclass.roc(new_df$new_pred, new_df$new_obs)
multiclass.roc(new_df$new_obs, new_df$new_pred)
i
i=1
class_1 <- classes[i]
new_df <- subset(pred_result, grepl(reps[j], pred_result$Resample))
new_df$new_obs <- rep(0, nrow(new_df))
new_df$new_obs[new_df$obs==class_1]<-1
new_df$new_pred <- rep(0, nrow(new_df))
new_df$new_pred[new_df$pred==class_1]<-1
multiclass.roc(new_df$new_pred, new_df$new_obs)
new_df=huh
class_1 <- classes[i]
new_df$new_obs <- rep(0, nrow(new_df))
new_df$new_obs[new_df$obs==class_1]<-1
new_df$new_pred <- rep(0, nrow(new_df))
new_df$new_pred[new_df$pred==class_1]<-1
multiclass.roc(new_df$new_pred, new_df$new_obs)
new=huh
new_df = huh
new_df$new_obs <- as.numeric(new_df$obs)
View(new_df)
new_df$new_pred <- as.numeric(new_df$pred)
View(new_df)
multiclass.roc(new_df$new_pred, new_df$new_obs)
cc = multiclass.roc(new_df$new_pred, new_df$new_obs)
cc$response
cc$rocs
cc$call
class(cc$rocs)
multiclass.roc(new_df$new_pred, new_df$new_obs)
cc$auc
cc = multiclass.roc(new_df$new_pred, new_df$new_obs)$auc
cc
dataType
namer <- paste0(dataType, "_model_performance.txt")
write.table(cc, namer, row.names=F, sep='\t', quote=F)
cc
write(cc, namer)
paste0(cc)
write(paste0("Multi-class AUC= ", round(cc,4)), namer)
#
forester <- function(x_data, y_data, dataType) {
good_gene_tab <- data.frame(num=1:length(colnames(x_data)), Feature=colnames(x_data))
namer <- paste0(dataType, "_feature_vector.txt")
write.table(good_gene_tab, namer, row.names=F, quote=F, sep='\t')
for(b in 1:ncol(x_data)){
if(grepl(';',colnames(x_data)[b])){
lookerupper <- paste0("^",colnames(x_data)[b], "$")
if(grepl("\\[", lookerupper)){
lookerupper1 <- strsplit(lookerupper, "\\[")
lookerupper2 <- strsplit(lookerupper, "\\]")
lookerupper <- paste0(lookerupper1[[1]][1], "\\[.*\\]",
lookerupper2[[1]][2])
}
lookupnum <- grep(lookerupper, good_gene_tab$Feature, fixed=F)
colnames(x_data)[b] <- paste0("OTU_", lookupnum)
}
}
data_run1 <- data.frame(x_data, condition=y_data)
feat_heat <- data.frame(Features = colnames(x_data))
added_ctrl <- trainControl(method = "repeatedcv", number = 5,
repeats = 10, verboseIter = T,
classProbs = T,
savePredictions = T, summaryFunction = multiClassSummary)
###500
rf_test <- train(condition ~ .,
data = data_run1, tuneLength = 20,
method = "rf",
trControl = added_ctrl)
namer <- paste0(dataType, "_rf_model.RData")
saveRDS(rf_test, file=namer)
# feature importance
rf_imp <- data.frame(Overall = varImp(rf_test)$importance$Overall)
if(nrow(good_gene_tab)<50){
nvar=nrow(good_gene_tab)
} else {nvar=50}
namer <- paste0(dataType, "_feature_imp.pdf")
pdf(namer, height = 10, width = 7)
varImpPlot(rf_test$finalModel, n.var=nvar)
dev.off()
feat_heat <- cbind(feat_heat, rf_imp)
bestModParam <- unlist(rf_test$bestTune)
selectedIndices <- rf_test$pred$mtry == bestModParam
huh <- rf_test$pred[selectedIndices, ]
#
#
#
huh$new_obs <- as.numeric(new_df$obs)
huh$new_pred <- as.numeric(new_df$pred)
cc = multiclass.roc(new_df$new_pred, new_df$new_obs)$auc
namer <- paste0(dataType, "_model_performance.txt")
write(paste0("Multi-class AUC= ", round(cc,4)), namer)
}
### run the models
y_data <- meta$Genotype
### rnaseq
x_data_genes <- readRDS("../ml_inputs/genes.RData")
sig_genes <- as.character(unique(subset(
read.table("../inputs/Genotype_vs_all.txt", T, '\t'),
abs(log2FoldChange) > 0.5 & padj < 0.05)$Gene))
x_data_genes <- x_data_genes[,sig_genes]
forester(x_data = x_data_genes, y_data = y_data, dataType = "Gene")
#
forester <- function(x_data, y_data, dataType) {
good_gene_tab <- data.frame(num=1:length(colnames(x_data)), Feature=colnames(x_data))
namer <- paste0(dataType, "_feature_vector.txt")
write.table(good_gene_tab, namer, row.names=F, quote=F, sep='\t')
for(b in 1:ncol(x_data)){
if(grepl(';',colnames(x_data)[b])){
lookerupper <- paste0("^",colnames(x_data)[b], "$")
if(grepl("\\[", lookerupper)){
lookerupper1 <- strsplit(lookerupper, "\\[")
lookerupper2 <- strsplit(lookerupper, "\\]")
lookerupper <- paste0(lookerupper1[[1]][1], "\\[.*\\]",
lookerupper2[[1]][2])
}
lookupnum <- grep(lookerupper, good_gene_tab$Feature, fixed=F)
colnames(x_data)[b] <- paste0("OTU_", lookupnum)
}
}
data_run1 <- data.frame(x_data, condition=y_data)
feat_heat <- data.frame(Features = colnames(x_data))
added_ctrl <- trainControl(method = "repeatedcv", number = 5,
repeats = 10, verboseIter = T,
classProbs = T,
savePredictions = T, summaryFunction = multiClassSummary)
###500
rf_test <- train(condition ~ .,
data = data_run1, tuneLength = 20,
method = "rf",
trControl = added_ctrl)
namer <- paste0(dataType, "_rf_model.RData")
saveRDS(rf_test, file=namer)
# feature importance
rf_imp <- data.frame(Overall = varImp(rf_test)$importance$Overall)
if(nrow(good_gene_tab)<50){
nvar=nrow(good_gene_tab)
} else {nvar=50}
namer <- paste0(dataType, "_feature_imp.pdf")
pdf(namer, height = 10, width = 7)
varImpPlot(rf_test$finalModel, n.var=nvar)
dev.off()
feat_heat <- cbind(feat_heat, rf_imp)
bestModParam <- unlist(rf_test$bestTune)
selectedIndices <- rf_test$pred$mtry == bestModParam
huh <- rf_test$pred[selectedIndices, ]
#
#
#
huh$new_obs <- as.numeric(new_df$obs)
huh$new_pred <- as.numeric(new_df$pred)
cc = multiclass.roc(huh$new_pred, huh$new_obs)$auc
namer <- paste0(dataType, "_model_performance.txt")
write(paste0("Multi-class AUC= ", round(cc,4)), namer)
}
### run the models
y_data <- meta$Genotype
### rnaseq
x_data_genes <- readRDS("../ml_inputs/genes.RData")
sig_genes <- as.character(unique(subset(
read.table("../inputs/Genotype_vs_all.txt", T, '\t'),
abs(log2FoldChange) > 0.5 & padj < 0.05)$Gene))
x_data_genes <- x_data_genes[,sig_genes]
forester(x_data = x_data_genes, y_data = y_data, dataType = "Gene")
##otus
x_data_otus <- readRDS("../ml_inputs/otus.RData")
forester(x_data = x_data_otus, y_data = y_data, dataType = "OTU")
setwd("/Volumes/lokep01lab/lokep01labspace/Rewilding_Data/IntegrationModel/predict_genotype")
library(ggplot2)
library(caret)
library(plotROC)
library(randomForest)
library(MLmetrics)
meta <- readRDS("../ml_inputs/mouse_metadata.RData")
#
forester <- function(x_data, y_data, dataType) {
good_gene_tab <- data.frame(num=1:length(colnames(x_data)), Feature=colnames(x_data))
namer <- paste0(dataType, "_feature_vector.txt")
write.table(good_gene_tab, namer, row.names=F, quote=F, sep='\t')
for(b in 1:ncol(x_data)){
if(grepl(';',colnames(x_data)[b])){
lookerupper <- paste0("^",colnames(x_data)[b], "$")
if(grepl("\\[", lookerupper)){
lookerupper1 <- strsplit(lookerupper, "\\[")
lookerupper2 <- strsplit(lookerupper, "\\]")
lookerupper <- paste0(lookerupper1[[1]][1], "\\[.*\\]",
lookerupper2[[1]][2])
}
lookupnum <- grep(lookerupper, good_gene_tab$Feature, fixed=F)
colnames(x_data)[b] <- paste0("OTU_", lookupnum)
}
}
data_run1 <- data.frame(x_data, condition=y_data)
feat_heat <- data.frame(Features = colnames(x_data))
added_ctrl <- trainControl(method = "repeatedcv", number = 5,
repeats = 10, verboseIter = T,
classProbs = T,
savePredictions = T, summaryFunction = multiClassSummary)
###500
rf_test <- train(condition ~ .,
data = data_run1, tuneLength = 20,
method = "rf",
trControl = added_ctrl)
namer <- paste0(dataType, "_rf_model.RData")
saveRDS(rf_test, file=namer)
# feature importance
rf_imp <- data.frame(Overall = varImp(rf_test)$importance$Overall)
if(nrow(good_gene_tab)<50){
nvar=nrow(good_gene_tab)
} else {nvar=50}
namer <- paste0(dataType, "_feature_imp.pdf")
pdf(namer, height = 10, width = 7)
varImpPlot(rf_test$finalModel, n.var=nvar)
dev.off()
feat_heat <- cbind(feat_heat, rf_imp)
bestModParam <- unlist(rf_test$bestTune)
selectedIndices <- rf_test$pred$mtry == bestModParam
huh <- rf_test$pred[selectedIndices, ]
#
#
#
huh$new_obs <- as.numeric(new_df$obs)
huh$new_pred <- as.numeric(new_df$pred)
cc = multiclass.roc(huh$new_pred, huh$new_obs)$auc
namer <- paste0(dataType, "_model_performance.txt")
write(paste0("Multi-class AUC= ", round(cc,4)), namer)
}
### run the models
y_data <- meta$Genotype
### rnaseq
x_data_genes <- readRDS("../ml_inputs/genes.RData")
sig_genes <- as.character(unique(subset(
read.table("../inputs/Genotype_vs_all.txt", T, '\t'),
abs(log2FoldChange) > 0.5 & padj < 0.05)$Gene))
x_data_genes <- x_data_genes[,sig_genes]
### run the models
y_data <- meta$Genotype
### rnaseq
x_data_genes <- readRDS("../ml_inputs/genes.RData")
sig_genes <- as.character(unique(subset(
read.table("../inputs/Genotype_vs_all.txt", T, '\t'),
abs(log2FoldChange) > 0.5 & padj < 0.05)$Gene))
x_data_genes <- x_data_genes[,sig_genes]
forester(x_data = x_data_genes, y_data = y_data, dataType = "Gene")
#
forester <- function(x_data, y_data, dataType) {
good_gene_tab <- data.frame(num=1:length(colnames(x_data)), Feature=colnames(x_data))
namer <- paste0(dataType, "_feature_vector.txt")
write.table(good_gene_tab, namer, row.names=F, quote=F, sep='\t')
for(b in 1:ncol(x_data)){
if(grepl(';',colnames(x_data)[b])){
lookerupper <- paste0("^",colnames(x_data)[b], "$")
if(grepl("\\[", lookerupper)){
lookerupper1 <- strsplit(lookerupper, "\\[")
lookerupper2 <- strsplit(lookerupper, "\\]")
lookerupper <- paste0(lookerupper1[[1]][1], "\\[.*\\]",
lookerupper2[[1]][2])
}
lookupnum <- grep(lookerupper, good_gene_tab$Feature, fixed=F)
colnames(x_data)[b] <- paste0("OTU_", lookupnum)
}
}
data_run1 <- data.frame(x_data, condition=y_data)
feat_heat <- data.frame(Features = colnames(x_data))
added_ctrl <- trainControl(method = "repeatedcv", number = 5,
repeats = 10, verboseIter = T,
classProbs = T,
savePredictions = T, summaryFunction = multiClassSummary)
###500
rf_test <- train(condition ~ .,
data = data_run1, tuneLength = 20,
method = "rf",
trControl = added_ctrl)
namer <- paste0(dataType, "_rf_model.RData")
saveRDS(rf_test, file=namer)
# feature importance
rf_imp <- data.frame(Overall = varImp(rf_test)$importance$Overall)
if(nrow(good_gene_tab)<50){
nvar=nrow(good_gene_tab)
} else {nvar=50}
namer <- paste0(dataType, "_feature_imp.pdf")
pdf(namer, height = 10, width = 7)
varImpPlot(rf_test$finalModel, n.var=nvar)
dev.off()
feat_heat <- cbind(feat_heat, rf_imp)
bestModParam <- unlist(rf_test$bestTune)
selectedIndices <- rf_test$pred$mtry == bestModParam
huh <- rf_test$pred[selectedIndices, ]
#
#
#
huh$new_obs <- as.numeric(huh$obs)
huh$new_pred <- as.numeric(huh$pred)
cc = multiclass.roc(huh$new_pred, huh$new_obs)$auc
namer <- paste0(dataType, "_model_performance.txt")
write(paste0("Multi-class AUC= ", round(cc,4)), namer)
}
### run the models
y_data <- meta$Genotype
### rnaseq
x_data_genes <- readRDS("../ml_inputs/genes.RData")
sig_genes <- as.character(unique(subset(
read.table("../inputs/Genotype_vs_all.txt", T, '\t'),
abs(log2FoldChange) > 0.5 & padj < 0.05)$Gene))
x_data_genes <- x_data_genes[,sig_genes]
forester(x_data = x_data_genes, y_data = y_data, dataType = "Gene")
##otus
x_data_otus <- readRDS("../ml_inputs/otus.RData")
forester(x_data = x_data_otus, y_data = y_data, dataType = "OTU")
##facs
x_data_facs <- readRDS("../ml_inputs/facs.RData")
forester(x_data = x_data_facs, y_data = y_data, dataType = "FACS")
##cytokines
x_data_cyt <- readRDS("../ml_inputs/cytokines.RData")
forester(x_data = x_data_cyt, y_data = y_data, dataType = "Cytokine")
##
#
#
#### all
x_data_all <- cbind(x_data_genes, x_data_otus, x_data_facs, x_data_cyt)
forester(x_data = x_data_all, y_data = y_data, dataType = "All")
library(ggplot2)
getwd()
