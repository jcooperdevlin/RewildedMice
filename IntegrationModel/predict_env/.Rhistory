lr_imp <- varImp(lr_test)$importance
View(lr_imp)
bestModParam <- unlist(lr_test$bestTune)
selectedIndices <- lr_test$pred == bestModParam
huh <- lr_test$pred
g <- ggplot(huh, aes(m=wild, d=factor(obs, levels = c("lab", "wild")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g
print(g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4))))
##test
#test results
preds1 <- data.frame(X1=predict(lr_test, newdata = data_run1[test_group,]))
#preds1$obs <- predict(lasso_test, newdata = data_test1)
preds1$true <- data_run1[test_group,]$condition
preds1$true <- gsub(0, "X0",preds1$true)
preds1$true <- gsub(1, "X1",preds1$true)
g <- ggplot(preds1, aes(m=X1, d=factor(true, levels = c("lab", "wild")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4)))
preds <- as.character(predict(lr_test, newdata = data_run1[test_group,]))
cf <- confusionMatrix(data = factor(preds, levels=c("lab","wild")),
reference = as.factor(data_run1[test_group,]$condition),
mode = "prec_recall")
c_mat <- c(truePos=cf$table[1,1], falsePos=cf$table[2,1],
falseNeg=cf$table[1,2], trueNeg=cf$table[2,2])
c_mat
setwd("/Volumes/lokep01lab/lokep01labspace/Rewilding_Data/int/IntegrationModel/predict_env")
library(ggplot2)
library(caret)
library(plotROC)
library(randomForest)
library(matrixStats)
meta <- readRDS("../ml_inputs/mouse_metadata.RData")
#
modeler <- function(x_data, y_data, dataType, train_group, test_group, model) {
good_gene_tab <- data.frame(num=1:length(colnames(x_data)), Feature=colnames(x_data))
namer <- paste0(dataType, "_feature_vector.txt")
write.table(good_gene_tab, namer, row.names=F, quote=F, sep='\t')
for(b in 1:ncol(x_data)){
if(grepl(';',colnames(x_data)[b])){
lookerupper <- paste0("^",colnames(x_data)[b], "$")
if(grepl("\\[", lookerupper)){
lookerupper1 <- strsplit(lookerupper, "\\[")
lookerupper2 <- strsplit(lookerupper, "\\]")
lookerupper <- paste0(lookerupper1[[1]][1], "\\[.*\\]",
lookerupper2[[1]][2])
}
lookupnum <- grep(lookerupper, good_gene_tab$Feature, fixed=F)
colnames(x_data)[b] <- paste0("OTU_", lookupnum)
}
}
data_run1 <- data.frame(x_data, condition=y_data)
feat_heat <- data.frame(Features = colnames(x_data))
added_ctrl <- trainControl(method = "repeatedcv", number = 5,
repeats = 10, verboseIter = T,
classProbs = T,
savePredictions = T, summaryFunction = twoClassSummary)
###500
mod_test <- train(condition ~ .,
data = data_run1[train_group,], tuneLength = 10,
method = model,
trControl = added_ctrl)
namer <- paste0(dataType, "_", model, "_model.RData")
saveRDS(mod_test, file=namer)
# feature importance
imp_df <- varImp(mod_test)$importance
feat_heat <- cbind(feat_heat, imp_df)
##test
#test results
preds1 <- data.frame(X1=predict(mod_test, newdata = data_run1[test_group,]))
#preds1$obs <- predict(lasso_test, newdata = data_test1)
preds1$true <- data_run1[test_group,]$condition
g <- ggplot(preds1, aes(m=X1, d=factor(true, levels = c("X0", "X1")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc() +
#ggtitle(paste0("Lasso_Test_", CV, "_", norm_names[f], "_", surv_num))
glist[[counter]] <- g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4)))
counter = counter+1
preds <- as.character(predict(mod_test, newdata = data_run1[test_group,]))
cf <- confusionMatrix(data = factor(preds, levels=c("lab","wild")),
reference = as.factor(data_run1[test_group,]$condition),
mode = "prec_recall")
c_mat <- c(truePos=cf$table[1,1], falsePos=cf$table[2,1],
falseNeg=cf$table[1,2], trueNeg=cf$table[2,2])
}
### choose test and train groups
train_group <- as.character(sample(meta$mouse_id, ceiling(nrow(meta)*0.75)))
test_group <- meta$mouse_id[!meta$mouse_id %in% train_group]
test_group
### run the models
y_data <- meta$Environment
### rnaseq
x_data_genes <- readRDS("../ml_inputs/genes.RData")
# By DE
sig_genes <- as.character(unique(subset(
read.table("../inputs/Lab_v_wild_all.txt", T, '\t'),
abs(log2FoldChange) > 1.2 & padj < 0.05)$Gene))
x_data_genes <- x_data_genes[,sig_genes]
# By Variation
x_data_genes <- x_data_genes[,order(colVars(x_data_genes),decreasing=T)][,1:200]
modeler(x_data = x_data_genes, y_data = y_data, dataType = "Gene",
train_group, test_group, "rf")
x_data = x_data_genes
y_data = y_data
dataType = "Gene"
model='rf'
good_gene_tab <- data.frame(num=1:length(colnames(x_data)), Feature=colnames(x_data))
namer <- paste0(dataType, "_feature_vector.txt")
write.table(good_gene_tab, namer, row.names=F, quote=F, sep='\t')
for(b in 1:ncol(x_data)){
if(grepl(';',colnames(x_data)[b])){
lookerupper <- paste0("^",colnames(x_data)[b], "$")
if(grepl("\\[", lookerupper)){
lookerupper1 <- strsplit(lookerupper, "\\[")
lookerupper2 <- strsplit(lookerupper, "\\]")
lookerupper <- paste0(lookerupper1[[1]][1], "\\[.*\\]",
lookerupper2[[1]][2])
}
lookupnum <- grep(lookerupper, good_gene_tab$Feature, fixed=F)
colnames(x_data)[b] <- paste0("OTU_", lookupnum)
}
}
data_run1 <- data.frame(x_data, condition=y_data)
feat_heat <- data.frame(Features = colnames(x_data))
added_ctrl <- trainControl(method = "repeatedcv", number = 5,
repeats = 10, verboseIter = T,
classProbs = T,
savePredictions = T, summaryFunction = twoClassSummary)
###500
mod_test <- train(condition ~ .,
data = data_run1[train_group,], tuneLength = 1,
method = model,
trControl = added_ctrl)
# feature importance
imp_df <- varImp(mod_test)$importance
feat_heat <- cbind(feat_heat, imp_df)
View(feat_heat)
##test
#test results
preds1 <- data.frame(X1=predict(mod_test, newdata = data_run1[test_group,]))
#preds1$obs <- predict(lasso_test, newdata = data_test1)
preds1$true <- data_run1[test_group,]$condition
g <- ggplot(preds1, aes(m=X1, d=factor(true, levels = c("X0", "X1")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g
g <- ggplot(preds1, aes(m=X1, d=factor(true, levels = c("lab", "wild")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g
View(preds1)
g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4)))
preds1$true
contrasts(preds1$true)
model.matrix(preds1$true)
model.matrix(~true, data=preds1)
model.matrix(~true -1, data=preds1)
model.matrix(~true, data=preds1)[1][,2]
model.matrix(~true, data=preds1)[1]
huh model.matrix(~true, data=preds1)
huh = model.matrix(~true, data=preds1)
View(huh)
huh = model.matrix(~true, data=preds1)[,2]
##test
#test results
preds1 <- data.frame(obs=predict(mod_test, newdata = data_run1[test_group,]))
#preds1$obs <- predict(lasso_test, newdata = data_test1)
preds1$true <- data_run1[test_group,]$condition
preds1 <- data.frame(obs=predict(mod_test, newdata = data_run1[test_group,]))
#preds1$obs <- predict(lasso_test, newdata = data_test1)
preds1$true <- data_run1[test_group,]$condition
preds1$obs_bin = model.matrix(~obs, data=preds1)[,2]
preds1$true_bin = model.matrix(~true, data=preds1)[,2]
View(preds1)
ggplot(preds1, aes(m=obs_bin, d=factor(true_bin, levels = c(0, 1)))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
D.ex <- rbinom(50, 1, .5)
rocdata <- data.frame(D = c(D.ex, D.ex),
M = c(rnorm(50, mean = D.ex, sd = .4), rnorm(50, mean = D.ex, sd = 1)),
Z = c(rep("A", 50), rep("B", 50)))
ggplot(rocdata, aes(m = M, d = D)) + geom_roc()
View(rocdata)
class(preds1$obs_bin)
class(preds1$true_bin)
preds1$true_bin
preds1$true
class(rocdata$M)
class(rocdata$D)
class(preds1$obs_bin)=="integer"
class(preds1$obs_bin)="integer"
class(preds1$obs_bin)
ggplot(preds1, aes(m=obs_bin, d=factor(true_bin, levels = c(0, 1)))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
ggplot(preds1, aes(m=obs_bin, d=factor(true_bin, levels = c(0, 1)))) +
geom_roc(n.cuts=0)
##test
#test results
preds1 <- data.frame(obs=predict(mod_test, newdata = data_run1[test_group,], type='prob'))
#preds1$obs <- predict(lasso_test, newdata = data_test1)
preds1$true <- data_run1[test_group,]$condition
View(preds1)
ggplot(preds1, aes(m=obs.lab, d=factor(true, levels = c("lab", "wild")))) +
geom_roc(n.cuts=0)
ggplot(preds1, aes(m=obs.wild, d=factor(true, levels = c("lab", "wild")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g <- ggplot(preds1, aes(m=obs.wild, d=factor(true, levels = c("lab", "wild")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4)))
preds <- as.character(predict(mod_test, newdata = data_run1[test_group,]))
cf <- confusionMatrix(data = factor(preds, levels=c("lab","wild")),
reference = as.factor(data_run1[test_group,]$condition),
mode = "prec_recall")
c_mat <- c(truePos=cf$table[1,1], falsePos=cf$table[2,1],
falseNeg=cf$table[1,2], trueNeg=cf$table[2,2])
c_mat
#
modeler <- function(x_data, y_data, dataType, train_group, test_group, model) {
good_gene_tab <- data.frame(num=1:length(colnames(x_data)), Feature=colnames(x_data))
namer <- paste0(dataType, "_feature_vector.txt")
write.table(good_gene_tab, namer, row.names=F, quote=F, sep='\t')
for(b in 1:ncol(x_data)){
if(grepl(';',colnames(x_data)[b])){
lookerupper <- paste0("^",colnames(x_data)[b], "$")
if(grepl("\\[", lookerupper)){
lookerupper1 <- strsplit(lookerupper, "\\[")
lookerupper2 <- strsplit(lookerupper, "\\]")
lookerupper <- paste0(lookerupper1[[1]][1], "\\[.*\\]",
lookerupper2[[1]][2])
}
lookupnum <- grep(lookerupper, good_gene_tab$Feature, fixed=F)
colnames(x_data)[b] <- paste0("OTU_", lookupnum)
}
}
data_run1 <- data.frame(x_data, condition=y_data)
feat_heat <- data.frame(Features = colnames(x_data))
added_ctrl <- trainControl(method = "repeatedcv", number = 5,
repeats = 10, verboseIter = T,
classProbs = T,
savePredictions = T, summaryFunction = twoClassSummary)
###500
mod_test <- train(condition ~ .,
data = data_run1[train_group,], tuneLength = 1,
method = model,
trControl = added_ctrl)
namer <- paste0(dataType, "_", model, "_model.RData")
saveRDS(mod_test, file=namer)
# feature importance
imp_df <- varImp(mod_test)$importance
feat_heat <- cbind(feat_heat, imp_df)
##test
#test results
preds1 <- data.frame(obs=predict(mod_test, newdata = data_run1[test_group,], type='prob'))
#preds1$obs <- predict(lasso_test, newdata = data_test1)
preds1$true <- data_run1[test_group,]$condition
preds1$obs_bin = model.matrix(~obs, data=preds1)[,2]
preds1$true_bin = model.matrix(~true, data=preds1)[,2]
namer <- paste0(dataType, "_", model, "_model_testAUC.pdf")
pdf(namer, height = 5, width = 7)
g <- ggplot(preds1, aes(m=obs.wild, d=factor(true, levels = c("lab", "wild")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
#ggtitle(paste0("Lasso_Test_", CV, "_", norm_names[f], "_", surv_num))
print(g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4))))
dev.off()
preds <- as.character(predict(mod_test, newdata = data_run1[test_group,]))
cf <- confusionMatrix(data = factor(preds, levels=c("lab","wild")),
reference = as.factor(data_run1[test_group,]$condition),
mode = "prec_recall")
c_mat <- c(truePos=cf$table[1,1], falsePos=cf$table[2,1],
falseNeg=cf$table[1,2], trueNeg=cf$table[2,2])
return(c_mat)
}
modeler(x_data = x_data_genes, y_data = y_data, dataType = "Gene",
train_group, test_group, "regLogistic")
model="regLogistic"
good_gene_tab <- data.frame(num=1:length(colnames(x_data)), Feature=colnames(x_data))
namer <- paste0(dataType, "_feature_vector.txt")
write.table(good_gene_tab, namer, row.names=F, quote=F, sep='\t')
for(b in 1:ncol(x_data)){
if(grepl(';',colnames(x_data)[b])){
lookerupper <- paste0("^",colnames(x_data)[b], "$")
if(grepl("\\[", lookerupper)){
lookerupper1 <- strsplit(lookerupper, "\\[")
lookerupper2 <- strsplit(lookerupper, "\\]")
lookerupper <- paste0(lookerupper1[[1]][1], "\\[.*\\]",
lookerupper2[[1]][2])
}
lookupnum <- grep(lookerupper, good_gene_tab$Feature, fixed=F)
colnames(x_data)[b] <- paste0("OTU_", lookupnum)
}
}
data_run1 <- data.frame(x_data, condition=y_data)
feat_heat <- data.frame(Features = colnames(x_data))
added_ctrl <- trainControl(method = "repeatedcv", number = 5,
repeats = 10, verboseIter = T,
classProbs = T,
savePredictions = T, summaryFunction = twoClassSummary)
###500
###500
mod_test <- train(condition ~ .,
data = data_run1[train_group,], tuneLength = 10,
method = model,
trControl = added_ctrl)
###500
mod_test <- train(condition ~ .,
data = data_run1[train_group,], tuneLength = 1,
method = model,
trControl = added_ctrl)
# feature importance
imp_df <- varImp(mod_test)$importance
feat_heat <- cbind(feat_heat, imp_df)
View(feat_heat)
##test
#test results
preds1 <- data.frame(obs=predict(mod_test, newdata = data_run1[test_group,], type='prob'))
View(preds1)
#preds1$obs <- predict(lasso_test, newdata = data_test1)
preds1$true <- data_run1[test_group,]$condition
#preds1$obs <- predict(lasso_test, newdata = data_test1)
preds1$true <- data_run1[test_group,]$condition
g <- ggplot(preds1, aes(m=obs.wild, d=factor(true, levels = c("lab", "wild")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
#ggtitle(paste0("Lasso_Test_", CV, "_", norm_names[f], "_", surv_num))
print(g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4))))
preds <- as.character(predict(mod_test, newdata = data_run1[test_group,]))
cf <- confusionMatrix(data = factor(preds, levels=c("lab","wild")),
reference = as.factor(data_run1[test_group,]$condition),
mode = "prec_recall")
c_mat <- c(truePos=cf$table[1,1], falsePos=cf$table[2,1],
falseNeg=cf$table[1,2], trueNeg=cf$table[2,2])
return(c_mat)
c_mat
#
modeler <- function(x_data, y_data, dataType, train_group, test_group, model) {
good_gene_tab <- data.frame(num=1:length(colnames(x_data)), Feature=colnames(x_data))
namer <- paste0(dataType, "_feature_vector.txt")
write.table(good_gene_tab, namer, row.names=F, quote=F, sep='\t')
for(b in 1:ncol(x_data)){
if(grepl(';',colnames(x_data)[b])){
lookerupper <- paste0("^",colnames(x_data)[b], "$")
if(grepl("\\[", lookerupper)){
lookerupper1 <- strsplit(lookerupper, "\\[")
lookerupper2 <- strsplit(lookerupper, "\\]")
lookerupper <- paste0(lookerupper1[[1]][1], "\\[.*\\]",
lookerupper2[[1]][2])
}
lookupnum <- grep(lookerupper, good_gene_tab$Feature, fixed=F)
colnames(x_data)[b] <- paste0("OTU_", lookupnum)
}
}
data_run1 <- data.frame(x_data, condition=y_data)
feat_heat <- data.frame(Features = colnames(x_data))
added_ctrl <- trainControl(method = "repeatedcv", number = 5,
repeats = 10, verboseIter = T,
classProbs = T,
savePredictions = T, summaryFunction = twoClassSummary)
###500
mod_test <- train(condition ~ .,
data = data_run1[train_group,], tuneLength = 1,
method = model,
trControl = added_ctrl)
namer <- paste0(dataType, "_", model, "_model.RData")
saveRDS(mod_test, file=namer)
# feature importance
imp_df <- varImp(mod_test)$importance
feat_heat <- cbind(feat_heat, imp_df)
namer <- paste0(dataType, "_", model, "_featImp.txt")
write.table(feat_heat, namer, quote=F, sep='\t', row.names=F)
##test
#test results
preds1 <- data.frame(obs=predict(mod_test, newdata = data_run1[test_group,], type='prob'))
#preds1$obs <- predict(lasso_test, newdata = data_test1)
preds1$true <- data_run1[test_group,]$condition
namer <- paste0(dataType, "_", model, "_model_testAUC.pdf")
pdf(namer, height = 5, width = 7)
g <- ggplot(preds1, aes(m=obs.wild, d=factor(true, levels = c("lab", "wild")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
#ggtitle(paste0("Lasso_Test_", CV, "_", norm_names[f], "_", surv_num))
print(g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4))))
dev.off()
preds <- as.character(predict(mod_test, newdata = data_run1[test_group,]))
cf <- confusionMatrix(data = factor(preds, levels=c("lab","wild")),
reference = as.factor(data_run1[test_group,]$condition),
mode = "prec_recall")
c_mat <- c(truePos=cf$table[1,1], falsePos=cf$table[2,1],
falseNeg=cf$table[1,2], trueNeg=cf$table[2,2])
return(c_mat)
}
modeler(x_data = x_data_genes, y_data = y_data, dataType = "Gene",
train_group, test_group, "regLogistic")
#
modeler <- function(x_data, y_data, dataType, train_group, test_group, model) {
good_gene_tab <- data.frame(num=1:length(colnames(x_data)), Feature=colnames(x_data))
namer <- paste0(dataType, "_feature_vector.txt")
write.table(good_gene_tab, namer, row.names=F, quote=F, sep='\t')
for(b in 1:ncol(x_data)){
if(grepl(';',colnames(x_data)[b])){
lookerupper <- paste0("^",colnames(x_data)[b], "$")
if(grepl("\\[", lookerupper)){
lookerupper1 <- strsplit(lookerupper, "\\[")
lookerupper2 <- strsplit(lookerupper, "\\]")
lookerupper <- paste0(lookerupper1[[1]][1], "\\[.*\\]",
lookerupper2[[1]][2])
}
lookupnum <- grep(lookerupper, good_gene_tab$Feature, fixed=F)
colnames(x_data)[b] <- paste0("OTU_", lookupnum)
}
}
data_run1 <- data.frame(x_data, condition=y_data)
feat_heat <- data.frame(Features = colnames(x_data))
added_ctrl <- trainControl(method = "repeatedcv", number = 5,
repeats = 10, verboseIter = T,
classProbs = T,
savePredictions = T, summaryFunction = twoClassSummary)
###500
mod_test <- train(condition ~ .,
data = data_run1[train_group,], tuneLength = 10,
method = model,
trControl = added_ctrl)
namer <- paste0(dataType, "_", model, "_model.RData")
saveRDS(mod_test, file=namer)
# feature importance
imp_df <- varImp(mod_test)$importance
feat_heat <- cbind(feat_heat, imp_df)
namer <- paste0(dataType, "_", model, "_featImp.txt")
write.table(feat_heat, namer, quote=F, sep='\t', row.names=F)
##test
#test results
preds1 <- data.frame(obs=predict(mod_test, newdata = data_run1[test_group,], type='prob'))
#preds1$obs <- predict(lasso_test, newdata = data_test1)
preds1$true <- data_run1[test_group,]$condition
namer <- paste0(dataType, "_", model, "_model_testAUC.pdf")
pdf(namer, height = 5, width = 7)
g <- ggplot(preds1, aes(m=obs.wild, d=factor(true, levels = c("lab", "wild")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
#ggtitle(paste0("Lasso_Test_", CV, "_", norm_names[f], "_", surv_num))
print(g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4))))
dev.off()
preds <- as.character(predict(mod_test, newdata = data_run1[test_group,]))
cf <- confusionMatrix(data = factor(preds, levels=c("lab","wild")),
reference = as.factor(data_run1[test_group,]$condition),
mode = "prec_recall")
c_mat <- c(truePos=cf$table[1,1], falsePos=cf$table[2,1],
falseNeg=cf$table[1,2], trueNeg=cf$table[2,2])
return(c_mat)
}
test_group
### run the models
y_data <- meta$Environment
### rnaseq
x_data_genes <- readRDS("../ml_inputs/genes.RData")
# By Variation
x_data_genes <- x_data_genes[,order(colVars(x_data_genes),decreasing=T)][,1:200]
modeler(x_data = x_data_genes, y_data = y_data, dataType = "Gene",
train_group, test_group, "rf")
modeler(x_data = x_data_genes, y_data = y_data, dataType = "Gene",
train_group, test_group, "regLogistic")
##otus
x_data_otus <- readRDS("../ml_inputs/otus.RData")
modeler(x_data = x_data_otus, y_data = y_data, dataType = "OTU",
train_group, test_group, "rf")
modeler(x_data = x_data_otus, y_data = y_data, dataType = "OTU",
train_group, test_group, "regLogistic")
##facs
x_data_facs <- readRDS("../ml_inputs/facs.RData")
modeler(x_data = x_data_facs, y_data = y_data, dataType = "FACS",
train_group, test_group, "rf")
modeler(x_data = x_data_facs, y_data = y_data, dataType = "FACS",
train_group, test_group, "regLogistic")
##cytokines
x_data_cyt <- readRDS("../ml_inputs/cytokines.RData")
modeler(x_data = x_data_cyt, y_data = y_data, dataType = "Cytokine",
train_group, test_group, "rf")
modeler(x_data = x_data_cyt, y_data = y_data, dataType = "Cyttokine",
train_group, test_group, "regLogistic")
##
#
#
#### all
x_data_all <- cbind(x_data_genes, x_data_otus, x_data_facs, x_data_cyt)
modeler(x_data = x_data_all, y_data = y_data, dataType = "All",
train_group, test_group, "rf")
#### all
x_data_all <- cbind(x_data_genes, x_data_otus, x_data_facs, x_data_cyt)
modeler(x_data = x_data_all, y_data = y_data, dataType = "All",
train_group, test_group, "rf")
getwd()
setwd("/Volumes/lokep01lab/lokep01labspace/Rewilding_Data/int/IntegrationModel/predict_env")
modeler(x_data = x_data_all, y_data = y_data, dataType = "All",
train_group, test_group, "regLogistic")
